{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

Wraps structs and exceptions defined in the thrift interface file and implemented
in the cpp2 generated code. This file just exposes the C++ classes and attributes
to Cython. The Pythonic wrappers of the individual structs and fields are
implemented in the Struct.pyx file.

}}
{{> common/AutoGeneratedPy}}

from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.memory cimport shared_ptr, unique_ptr
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap, pair as cpair
from libcpp.unordered_set cimport unordered_set as cuset
from libcpp.unordered_map cimport unordered_map as cumap
from thrift.py3.exceptions cimport cTException, Error as __Error
cimport thrift.py3.types
{{#program:includeNamespaces}}
cimport {{#includeNamespace}}{{value}}.{{/includeNamespace}}types
{{/program:includeNamespaces}}


{{#program:enums}}
{{#first?}}
cdef extern from "{{program:includePrefix}}gen-cpp2/{{program:name}}_types.h"{{!
}} namespace "{{#program:cppNamespaces}}{{value}}{{^last?}}::{{/last?}}{{/program:cppNamespaces}}":
{{/first?}}
    cdef cppclass c{{enum:name}} "{{#program:cppNamespaces}}{{value}}::{{/program:cppNamespaces}}{{enum:name}}":
        bint operator==(c{{enum:name}}&)
    {{#enum:values}}
    c{{enum:name}} {{enum:name}}__{{enumValue:name}} "{{#program:cppNamespaces}}{{value}}::{{/program:cppNamespaces}}{{enum:name}}::{{enumValue:name}}"
    {{/enum:values}}
{{/program:enums}}

{{#program:enums}}
cdef c{{enum:name}} {{enum:name}}_to_cpp(value)
{{/program:enums}}

{{#program:structs}}
{{#first?}}
cdef extern from "{{program:includePrefix}}gen-cpp2/{{program:name}}_types_custom_protocol.h"{{!
}} namespace "{{#program:cppNamespaces}}{{value}}{{^last?}}::{{/last?}}{{/program:cppNamespaces}}":
{{/first?}}
    cdef cppclass c{{struct:name}}__isset "{{#program:cppNamespaces}}{{value}}::{{/program:cppNamespaces}}{{struct:name}}::__isset":
    {{#struct:fields}}
        bint {{field:name}}
    {{/struct:fields}}
    {{^struct:fields}}
        pass
    {{/struct:fields}}

    # Forward Declaration
    cdef cppclass c{{struct:name}} "{{#program:cppNamespaces}}{{value}}::{{/program:cppNamespaces}}{{struct:name}}"{{#struct:exception?}}(cTException){{/struct:exception?}}

    cdef cppclass c{{struct:name}} "{{#program:cppNamespaces}}{{value}}::{{/program:cppNamespaces}}{{struct:name}}"{{#struct:exception?}}(cTException){{/struct:exception?}}:
        c{{struct:name}}() except +
        c{{struct:name}}(const c{{struct:name}}&) except +
        bint operator==(c{{struct:name}}&)
    {{#struct:fields}}
        {{#field:type}}{{> types/CythonCppType}}{{/field:type}} {{field:name}}
    {{/struct:fields}}
        c{{struct:name}}__isset __isset

{{/program:structs}}

{{#program:structs}}
{{#first?}}cdef extern from "<utility>" namespace "std" nogil:{{/first?}}
    cdef shared_ptr[c{{struct:name}}] move(unique_ptr[c{{struct:name}}]){{/program:structs}}

{{#program:structs}}
# Forward Definition of the cython struct
cdef class {{struct:name}}{{#struct:exception?}}(__Error){{/struct:exception?}}{{^struct:exception?}}(thrift.py3.types.Struct){{/struct:exception?}}

cdef class {{struct:name}}{{#struct:exception?}}(__Error){{/struct:exception?}}{{^struct:exception?}}(thrift.py3.types.Struct){{/struct:exception?}}:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[c{{struct:name}}] c_{{struct:name}}
    {{!Memoized Python wrappers of struct fields, created lazily}}
    {{#struct:fields}}
    {{#field:type}}{{#type:struct}}
    cdef {{> types/CythonPythonType}} __{{field:name}}
    {{/type:struct}}{{#type:container?}}
    cdef {{> types/CythonPythonType}} __{{field:name}}
    {{/type:container?}}{{/field:type}}
    {{/struct:fields}}

    @staticmethod
    cdef create(shared_ptr[c{{struct:name}}] c_{{struct:name}})

{{/program:structs}}

{{#program:containerTypes}}
cdef class {{type:flat_name}}:
    cdef object __hash
    cdef object __weakref__
{{#type:listElemType}}
    cdef shared_ptr[vector[{{> types/CythonCppType}}]] _vector
    @staticmethod
    cdef create(shared_ptr[vector[{{> types/CythonCppType}}]])
{{/type:listElemType}}
{{#type:setElemType}}
    cdef shared_ptr[c{{#type:unordered?}}u{{/type:unordered?}}set[{{> types/CythonCppType}}]] _set
    @staticmethod
    cdef create(shared_ptr[c{{#type:unordered?}}u{{/type:unordered?}}set[{{> types/CythonCppType}}]])
{{/type:setElemType}}
{{#type:map?}}
    cdef shared_ptr[c{{#type:unordered?}}u{{/type:unordered?}}map[{{> CythonCppWrapperMapKeyValue}}]] _map
    @staticmethod
    cdef create(shared_ptr[c{{#type:unordered?}}u{{/type:unordered?}}map[{{> CythonCppWrapperMapKeyValue}}]])
{{/type:map?}}

{{/program:containerTypes}}{{#program:moveContainerTypes}}
{{#first?}}cdef extern from "<utility>" namespace "std" nogil:{{/first?}}
{{#type:listElemType}}    cdef shared_ptr[vector[{{> types/CythonCppType}}]] {{!
}}move(unique_ptr[vector[{{> types/CythonCppType}}]]){{/type:listElemType}}{{!
}}{{#type:setElemType}}    cdef shared_ptr[c{{#type:unordered?}}u{{/type:unordered?}}set[{{> types/CythonCppType}}]] {{!
}}move(unique_ptr[c{{#type:unordered?}}u{{/type:unordered?}}set[{{> types/CythonCppType}}]]){{/type:setElemType}}{{!
}}{{#type:map?}}    cdef shared_ptr[c{{#type:unordered?}}u{{/type:unordered?}}map[{{> CythonCppWrapperMapKeyValue}}]] {{!
}}move(unique_ptr[c{{#type:unordered?}}u{{/type:unordered?}}map[{{> CythonCppWrapperMapKeyValue}}]]){{/type:map?}}{{/program:moveContainerTypes}}

{{#program:constants}}
{{#first?}}cdef extern from "{{program:includePrefix}}gen-cpp2/{{program:name}}_constants.h"{{!
}} namespace "{{#program:cppNamespaces}}{{value}}{{^last?}}::{{/last?}}{{/program:cppNamespaces}}":{{/first?}}
    {{#constant:type}}
    cdef {{^type:string?}}{{> types/CythonCppType}}{{/type:string?}}{{#type:string?}}const char*{{/type:string?}} {{!
    }}c{{constant:name}} "{{#program:cppNamespaces}}{{value}}::{{/program:cppNamespaces}}{{program:name}}_constants::{{constant:name}}"{{!
    }}{{#type:struct?}}(){{/type:struct?}}{{#type:string?}}(){{/type:string?}}{{#type:binary?}}(){{/type:binary?}}{{#type:container?}}(){{/type:container?}}{{#type:enum?}}(){{/type:enum?}}{{/constant:type}}{{/program:constants}}

{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

Included in places where a Python object exists and its underlying C++
representation is required to be passed by value as a client call argument. For
most primitives, the conversion can be done automatically, but for strings and
structures, some work is required.

This template assumes that the Python object is in a variable named key, and is
most often used with maps. Use the CythonPythonToCppItem template for general
keys (conventionally used for sets, lists, and map values).

}}{{#type:bool?}}arg_{{field:name}}{{/type:bool?}}{{!
}}{{#type:byte?}}arg_{{field:name}}{{/type:byte?}}{{!
}}{{#type:i16?}}arg_{{field:name}}{{/type:i16?}}{{!
}}{{#type:i32?}}arg_{{field:name}}{{/type:i32?}}{{!
}}{{#type:i64?}}arg_{{field:name}}{{/type:i64?}}{{!
}}{{#type:double?}}arg_{{field:name}}{{/type:double?}}{{!
}}{{#type:float?}}arg_{{field:name}}{{/type:float?}}{{!
}}{{#type:string?}}arg_{{field:name}}.encode('UTF-8'){{/type:string?}}{{!
}}{{#type:binary?}}arg_{{field:name}}{{/type:binary?}}{{!
}}{{#type:struct}}deref((<{{> common/ModulePath}}.{{struct:name}}>arg_{{field:name}}{{!
  }}).c_{{struct:name}}){{/type:struct}}{{!
}}{{#type:list?}}deref({{> common/ModulePath}}.{{type:flat_name}}(arg_{{field:name}})._vector.get()){{/type:list?}}{{!
}}{{#type:set?}}c{{#type:unordered?}}u{{/type:unordered?}}set[{{!
  }}{{#type:setElemType}}{{> types/CythonCppType}}{{/type:setElemType}}{{!
  }}](deref({{> common/ModulePath}}.{{type:flat_name}}(arg_{{field:name}})._set.get())){{/type:set?}}{{!
}}{{#type:map?}}c{{#type:unordered?}}u{{/type:unordered?}}map[{{!
  }}{{#type:keyType}}{{> types/CythonCppType}}{{/type:keyType}},{{!
  }}{{#type:valueType}}{{> types/CythonCppType}}{{/type:valueType}}{{!
  }}](deref({{> common/ModulePath}}.{{type:flat_name}}(arg_{{field:name}})._map.get())){{/type:map?}}{{!
}}{{#type:enum}}{{> common/ModulePath}}.{{enum:name}}_to_cpp(arg_{{field:name}}){{/type:enum}}

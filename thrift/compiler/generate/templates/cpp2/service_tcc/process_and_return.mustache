<%!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%><%#service:functions%><%#function:returnType%>
template <typename ProtocolIn_, typename ProtocolOut_>
void <%service:name%>AsyncProcessor::_processInThread_<%function:name%>(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  auto pri = iface_->getRequestPriority(ctx, apache::thrift::concurrency::NORMAL);
<%^function:oneway?%>
  processInThread<ProtocolIn_, ProtocolOut_>(std::move(req), std::move(buf),std::move(iprot), ctx, eb, tm, pri, false, &<%service:name%>AsyncProcessor::process_<%function:name%><ProtocolIn_, ProtocolOut_>, this);
<%/function:oneway?%>
<%#function:oneway?%>
  processInThread<ProtocolIn_, ProtocolOut_>(std::move(req), std::move(buf),std::move(iprot), ctx, eb, tm, pri, true, &<%service:name%>AsyncProcessor::process_<%function:name%><ProtocolIn_, ProtocolOut_>, this);
<%/function:oneway?%>
}

template <typename ProtocolIn_, typename ProtocolOut_>
void <%service:name%>AsyncProcessor::process_<%function:name%>(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  <%service:name%>_<%function:name%>_pargs args;
<%#function:args%><%#field:type%>
<%^type:resolves_to_complex_return?%>
<%^type:enum?%>
  <% > Type%> uarg_<%field:name%>{0};
<%/type:enum?%>
<%#type:enum?%>
  <% > Type%> uarg_<%field:name%>{static_cast<<% > Type%>>(0)};
<%/type:enum?%>
  args.get<<%field:index%>>().value = &uarg_<%field:name%>;
<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
  std::unique_ptr<<% > Type%>> uarg_<%field:name%>(new <% > Type%>());
  args.get<<%field:index%>>().value = uarg_<%field:name%>.get();
<%/type:resolves_to_complex_return?%>
<%/field:type%><%/function:args%>
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "<%service:name%>.<%function:name%>", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
<%#function:oneway?%>
    LOG(ERROR) << ex.what() << " in function noResponse";
    return;
  }
  std::unique_ptr<apache::thrift::HandlerCallbackBase> callback(new apache::thrift::HandlerCallbackBase(std::move(req), std::move(c), nullptr, nullptr, eb, tm, ctx));
<%/function:oneway?%>
<%^function:oneway?%>
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function <%function:name%>";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("<%function:name%>", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        req->sendReply(queue.move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function <%function:name%>";
    }
  }
<%^type:resolves_to_complex_return?%>
  auto callback = std::make_unique<apache::thrift::HandlerCallback<<% > Type%>>>(std::move(req), std::move(c), return_<%function:name%><ProtocolIn_,ProtocolOut_>, throw_<%function:name%><ProtocolIn_, ProtocolOut_>, throw_wrapped_<%function:name%><ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
  auto callback = std::make_unique<apache::thrift::HandlerCallback<std::unique_ptr<<% > Type%>>>>(std::move(req), std::move(c), return_<%function:name%><ProtocolIn_,ProtocolOut_>, throw_<%function:name%><ProtocolIn_, ProtocolOut_>, throw_wrapped_<%function:name%><ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
<%/type:resolves_to_complex_return?%>
  if (!callback->isRequestActive()) {
    callback.release()->deleteInThread();
    return;
  }
<%/function:oneway?%>
  ctx->setStartedProcessing();
  iface_->async_tm_<%function:name%>(std::move(callback)<% > service_tcc/get_args_ref%>);
}

<%^function:oneway?%>
template <class ProtocolIn_, class ProtocolOut_>
<%#type:void?%>
folly::IOBufQueue <%service:name%>AsyncProcessor::return_<%function:name%>(int32_t protoSeqId, apache::thrift::ContextStack* ctx) {
<%/type:void?%>
<%^type:void?%>
folly::IOBufQueue <%service:name%>AsyncProcessor::return_<%function:name%>(int32_t protoSeqId, apache::thrift::ContextStack* ctx, <% > Type%> const& _return) {
<%/type:void?%>
  ProtocolOut_ prot;
  <%service:name%>_<%function:name%>_presult result;
<%^type:void?%>
  result.get<0>().value = const_cast<<% > Type%>*>(&_return);
  result.setIsSet(0, true);
<%/type:void?%>
  return serializeResponse("<%function:name%>", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void <%service:name%>AsyncProcessor::throw_<%function:name%>(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
<%#function:exceptions?%>
  <%service:name%>_<%function:name%>_presult result;
<%/function:exceptions?%>
  try {
    std::rethrow_exception(ep);
  }
<%#function:exceptions%>
  catch (const <% > common/namespace_cpp2%><%#field:type%><%type:name%><%/field:type%>& e) {
    ctx->userExceptionWrapped(true, folly::exception_wrapper(ep, e));
<%#type:void?%>
    result.get<<%field:index%>>().ref() = e;
    result.setIsSet(<%field:index%>, true);
<%/type:void?%>
<%^type:void?%>
    result.get<<%field:index_plus_one%>>().ref() = e;
    result.setIsSet(<%field:index_plus_one%>, true);
<%/type:void?%>
  }
<%/function:exceptions%>
  catch (const std::exception& e) {
    auto ew = folly::exception_wrapper(ep, e);
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function <%function:name%>";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("<%function:name%>", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function <%function:name%>";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function <%function:name%>";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("<%function:name%>", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function <%function:name%>";
    }
  }
<%#function:exceptions?%>
  auto queue = serializeResponse("<%function:name%>", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
<%/function:exceptions?%>
}

template <class ProtocolIn_, class ProtocolOut_>
void <%service:name%>AsyncProcessor::throw_wrapped_<%function:name%>(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
<%#function:exceptions?%>
  <%service:name%>_<%function:name%>_presult result;
<%/function:exceptions?%>
<%#function:exceptions%>
  if (ew.with_exception([&](<% > common/namespace_cpp2%><%#field:type%><%type:name%><%/field:type%>& e) {
    ctx->userExceptionWrapped(true, ew);
<%#type:void?%>
    result.get<<%field:index%>>().ref() = e;
    result.setIsSet(<%field:index%>, true);
<%/type:void?%>
<%^type:void?%>
    result.get<<%field:index_plus_one%>>().ref() = e;
    result.setIsSet(<%field:index_plus_one%>, true);
<%/type:void?%>
  }
  )) {} else
<%/function:exceptions%>
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function <%function:name%>";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("<%function:name%>", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function <%function:name%>";
    }
  }
<%#function:exceptions?%>
  auto queue = serializeResponse("<%function:name%>", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
<%/function:exceptions?%>
}

<%/function:oneway?%>
<%/function:returnType%><%/service:functions%>

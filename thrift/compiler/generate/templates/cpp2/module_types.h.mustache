<%!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%>
<% > Autogen%>
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

<% > module_types_h/includes%>
#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>

<% > module_types_h/cpp_includes%>


<% > module_types_h/declare_enums%>
<%#program:structs%><%!
%><% > common/namespace_cpp2_begin%>


<%^program:enums?%>
<% > module_types_h/struct_forward_declare%>
<%/program:enums?%>
<% > module_types_h/typedef_initialize%>
class <%struct:name%> : private apache::thrift::detail::st::ComparisonOperators<<%struct:name%>><%#struct:exception?%>, public apache::thrift::TException<%/struct:exception?%> {
 public:
<%#struct:union?%>
<% > module_types_h/union_enum%>


  <%struct:name%>() :
      type_(Type::__EMPTY__) {}

<% > module_types_h/union_copy_ctor%>


<% > module_types_h/union_assign_overload%>

<% > module_types_h/union_template_ctor%>
  void __clear();

  virtual ~<%struct:name%>() throw() {
    __clear();
  }

<% > module_types_h/union_storage%>

  bool operator==(const <%struct:name%>& rhs) const;
<% > module_types_h/union_lt_overload%>

<% > module_types_h/union_setters%>
<% > module_types_h/union_getters%>
<% > module_types_h/union_mutables%>
<% > module_types_h/union_moves%>
  Type getType() const { return type_; }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  Type type_;
  storage_type value_;
<%/struct:union?%>
<%^struct:union?%>

<% > module_types_h/base_ctor%>

<% > module_types_h/fragile_ctor%>
<% > module_types_h/template_ctor%>

  <%struct:name%>(<%struct:name%>&&) = default;
<%^struct:fields_contain_cpp_ref?%>

  <%struct:name%>(const <%struct:name%>&) = default;
<%/struct:fields_contain_cpp_ref?%>
<%#struct:fields_contain_cpp_ref?%>
  <%struct:name%>(const <%struct:name%>& src);
<%/struct:fields_contain_cpp_ref?%>

  <%struct:name%>& operator=(<%struct:name%>&&) = default;
<%^struct:fields_contain_cpp_ref?%>

  <%struct:name%>& operator=(const <%struct:name%>&) = default;
<%/struct:fields_contain_cpp_ref?%>
<%#struct:fields_contain_cpp_ref?%>
  <%struct:name%>& operator=(const <%struct:name%>& src);
<%/struct:fields_contain_cpp_ref?%>
  void __clear();

  virtual ~<%struct:name%>() throw() {}

<%#struct:fields?%>
<% > module_types_h/declare_members%>

<%/struct:fields?%>
<% > module_types_h/eq_overload%>
<% > module_types_h/lt_overload%>
<%#struct:getters_setters?%>
<%#struct:fields?%>
<% > module_types_h/getters_setters%>
<%/struct:fields?%>
<%/struct:getters_setters?%>

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
<%#struct:exception?%>

  virtual const char* what() const throw() {
    return "<% > common/namespace_cpp2%><%struct:name%>";
  }
<%/struct:exception?%>
<%/struct:union?%>
};

void swap(<%struct:name%>& a, <%struct:name%>& b);
extern template uint32_t <%struct:name%>::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t <%struct:name%>::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t <%struct:name%>::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t <%struct:name%>::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t <%struct:name%>::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t <%struct:name%>::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t <%struct:name%>::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t <%struct:name%>::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

<% > common/namespace_cpp2_end%>

namespace apache { namespace thrift {

template <> inline void Cpp2Ops<<% > common/namespace_cpp2%><%struct:name%>>::clear(<% > common/namespace_cpp2%><%struct:name%>* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops<<% > common/namespace_cpp2%><%struct:name%>>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops<<% > common/namespace_cpp2%><%struct:name%>>::write(Protocol* proto, <% > common/namespace_cpp2%><%struct:name%> const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops<<% > common/namespace_cpp2%><%struct:name%>>::read(Protocol* proto, <% > common/namespace_cpp2%><%struct:name%>* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops<<% > common/namespace_cpp2%><%struct:name%>>::serializedSize(Protocol const* proto, <% > common/namespace_cpp2%><%struct:name%> const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops<<% > common/namespace_cpp2%><%struct:name%>>::serializedSizeZC(Protocol const* proto, <% > common/namespace_cpp2%><%struct:name%> const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
<%/program:structs%>
<% > common/namespace_cpp2_begin%>

<%^program:structs%><%#program:typedefs%><%#typedef:type%>

typedef <% > Type%> <%typedef:symbolic%>;
<%/typedef:type%><%/program:typedefs%><%/program:structs%>

<% > common/namespace_cpp2_end%>

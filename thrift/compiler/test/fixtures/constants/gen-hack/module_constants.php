<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
class module_CONSTANTS {
  /**
   * Original thrift constant:-
   * i32 myInt
   */
  const int myInt = 1337;
  /**
   * Original thrift constant:-
   * string name
   */
  const string name = "Mark Zuckerberg";
  /**
   * Original thrift constant:-
   * list<map<string, i32>> states
   */
  public static Vector<Map<string, int>> $states = Vector {
      Map {
        "San Diego" => 3211000,
        "Sacramento" => 479600,
        "SF" => 837400,
      },
      Map {
        "New York" => 8406000,
        "Albany" => 98400,
      },
    };
  /**
   * Original thrift constant:-
   * double x
   */
  const float x = 1.0;
  /**
   * Original thrift constant:-
   * double y
   */
  const float y = 1000000.0;
  /**
   * Original thrift constant:-
   * double z
   */
  const float z = 1e+09;
  /**
   * Original thrift constant:-
   * struct module.Internship instagram
   */
  public static Internship $instagram = new Internship(
      12,
      "Software Engineer",
      Company::INSTAGRAM,
    );
  /**
   * Original thrift constant:-
   * list<struct module.Range> kRanges
   */
  public static Vector<Range> $kRanges = Vector {
      new Range(
        1,
        2,
      ),
      new Range(
        5,
        6,
      ),
    };
  /**
   * Original thrift constant:-
   * list<struct module.Internship> internList
   */
  public static Vector<Internship> $internList = Vector {
      new Internship(
        12,
        "Software Engineer",
        Company::INSTAGRAM,
      ),
      new Internship(
        10,
        "Sales Intern",
        Company::FACEBOOK,
      ),
    };
  /**
   * Original thrift constant:-
   * string apostrophe
   */
  const string apostrophe = "'";
  /**
   * Original thrift constant:-
   * string tripleApostrophe
   */
  const string tripleApostrophe = "'''";
  /**
   * Original thrift constant:-
   * string quotationMark
   */
  const string quotationMark = "\"";
  /**
   * Original thrift constant:-
   * string backslash
   */
  const string backslash = "\\";
  /**
   * Original thrift constant:-
   * string escaped_a
   */
  const string escaped_a = "\x61";
  /**
   * Original thrift constant:-
   * map<string, i32> char2ascii
   */
  public static Map<string, int> $char2ascii = Map {
      "'" => 39,
      "\"" => 34,
      "\\" => 92,
      "\x61" => 97,
    };
  /**
   * Original thrift constant:-
   * list<string> escaped_strings
   */
  public static Vector<string> $escaped_strings = Vector {
      "\x61",
      "\xab",
      "\x6a",
      "\xa6",
      "\x61yyy",
      "\xabyyy",
      "\x6ayyy",
      "\xa6yyy",
      "zzz\x61",
      "zzz\xab",
      "zzz\x6a",
      "zzz\xa6",
      "zzz\x61yyy",
      "zzz\xabyyy",
      "zzz\x6ayyy",
      "zzz\xa6yyy",
    };
  /**
   * Original thrift constant:-
   * bool false_c
   */
  const bool false_c = false;
  /**
   * Original thrift constant:-
   * bool true_c
   */
  const bool true_c = true;
  /**
   * Original thrift constant:-
   * byte zero_byte
   */
  const int zero_byte = 0;
  /**
   * Original thrift constant:-
   * i16 zero16
   */
  const int zero16 = 0;
  /**
   * Original thrift constant:-
   * i32 zero32
   */
  const int zero32 = 0;
  /**
   * Original thrift constant:-
   * i64 zero64
   */
  const int zero64 = 0;
  /**
   * Original thrift constant:-
   * double zero_dot_zero
   */
  const float zero_dot_zero = 0.0;
  /**
   * Original thrift constant:-
   * string empty_string
   */
  const string empty_string = "";
  /**
   * Original thrift constant:-
   * list<i32> empty_int_list
   */
  public static Vector<int> $empty_int_list = Vector {
    };
  /**
   * Original thrift constant:-
   * list<string> empty_string_list
   */
  public static Vector<string> $empty_string_list = Vector {
    };
  /**
   * Original thrift constant:-
   * set<i32> empty_int_set
   */
  public static Set<int> $empty_int_set = Set {
    };
  /**
   * Original thrift constant:-
   * set<string> empty_string_set
   */
  public static Set<string> $empty_string_set = Set {
    };
  /**
   * Original thrift constant:-
   * map<i32, i32> empty_int_int_map
   */
  public static Map<int, int> $empty_int_int_map = Map {
    };
  /**
   * Original thrift constant:-
   * map<i32, string> empty_int_string_map
   */
  public static Map<int, string> $empty_int_string_map = Map {
    };
  /**
   * Original thrift constant:-
   * map<string, i32> empty_string_int_map
   */
  public static Map<string, int> $empty_string_int_map = Map {
    };
  /**
   * Original thrift constant:-
   * map<string, string> empty_string_string_map
   */
  public static Map<string, string> $empty_string_string_map = Map {
    };

  public static array $__values = array(
    "myInt" => 1337,
    "name" => "Mark Zuckerberg",
    "states" => Vector {
        Map {
          "San Diego" => 3211000,
          "Sacramento" => 479600,
          "SF" => 837400,
        },
        Map {
          "New York" => 8406000,
          "Albany" => 98400,
        },
      },
    "x" => 1.0,
    "y" => 1000000.0,
    "z" => 1e+09,
    "instagram" => new Internship(
        12,
        "Software Engineer",
        Company::INSTAGRAM,
      ),
    "kRanges" => Vector {
        new Range(
          1,
          2,
        ),
        new Range(
          5,
          6,
        ),
      },
    "internList" => Vector {
        new Internship(
          12,
          "Software Engineer",
          Company::INSTAGRAM,
        ),
        new Internship(
          10,
          "Sales Intern",
          Company::FACEBOOK,
        ),
      },
    "apostrophe" => "'",
    "tripleApostrophe" => "'''",
    "quotationMark" => "\"",
    "backslash" => "\\",
    "escaped_a" => "\x61",
    "char2ascii" => Map {
        "'" => 39,
        "\"" => 34,
        "\\" => 92,
        "\x61" => 97,
      },
    "escaped_strings" => Vector {
        "\x61",
        "\xab",
        "\x6a",
        "\xa6",
        "\x61yyy",
        "\xabyyy",
        "\x6ayyy",
        "\xa6yyy",
        "zzz\x61",
        "zzz\xab",
        "zzz\x6a",
        "zzz\xa6",
        "zzz\x61yyy",
        "zzz\xabyyy",
        "zzz\x6ayyy",
        "zzz\xa6yyy",
      },
    "false_c" => false,
    "true_c" => true,
    "zero_byte" => 0,
    "zero16" => 0,
    "zero32" => 0,
    "zero64" => 0,
    "zero_dot_zero" => 0.0,
    "empty_string" => "",
    "empty_int_list" => Vector {
      },
    "empty_string_list" => Vector {
      },
    "empty_int_set" => Set {
      },
    "empty_string_set" => Set {
      },
    "empty_int_int_map" => Map {
      },
    "empty_int_string_map" => Map {
      },
    "empty_string_int_map" => Map {
      },
    "empty_string_string_map" => Map {
      },
  );
}


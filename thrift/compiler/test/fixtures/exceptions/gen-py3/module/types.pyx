#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t, uint32_t
from cython.operator cimport dereference as deref, preincrement as inc
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types import NOTSET
cimport thrift.py3.std_libcpp as std_libcpp
from thrift.py3.serializer cimport IOBuf
from thrift.py3.serializer import Protocol
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
from enum import Enum




cdef class Banal(thrift.py3.exceptions.Error):

    def __init__(
        Banal self
    ):
        self.c_Banal = make_shared[cBanal]()

        inst = self


    def __iter__(self):
        return iter(())

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cBanal] c_Banal):
        inst = <Banal>Banal.__new__(Banal)
        inst.c_Banal = c_Banal
        return inst


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, Banal) and
                isinstance(other, Banal)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cBanal cself = deref((<Banal>self).c_Banal)
        cdef cBanal cother = deref((<Banal>other).c_Banal)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(Banal self):
        return super().__hash__()

    def __repr__(Banal self):
        return f'Banal()'


cdef class Fiery(thrift.py3.exceptions.Error):

    def __init__(
        Fiery self,
        message=None
    ):
        self.c_Fiery = make_shared[cFiery]()

        inst = self
        if message is not None:
            deref(inst.c_Fiery).message = message.encode('UTF-8')


    def __iter__(self):
        yield 'message', self.message

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cFiery] c_Fiery):
        inst = <Fiery>Fiery.__new__(Fiery)
        inst.c_Fiery = c_Fiery
        return inst

    @property
    def message(self):

        return self.c_Fiery.get().message.decode('UTF-8')


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, Fiery) and
                isinstance(other, Fiery)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cFiery cself = deref((<Fiery>self).c_Fiery)
        cdef cFiery cother = deref((<Fiery>other).c_Fiery)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(Fiery self):
        return super().__hash__()

    def __repr__(Fiery self):
        return f'Fiery(message={repr(self.message)})'



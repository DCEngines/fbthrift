<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift service:-
 * Bar
 */
interface BarAsyncIf extends \IThriftAsyncIf {
  /**
   * Original thrift definition:-
   * string
   *   baz(1: set<i32> a,
   *       2: list<map<i32, set<string>>> b);
   */
  public function baz(keyset<int> $a, \Indexish<int, \Indexish<int, keyset<string>>> $b): Awaitable<string>;
}

/**
 * Original thrift service:-
 * Bar
 */
interface BarIf extends \IThriftSyncIf {
  /**
   * Original thrift definition:-
   * string
   *   baz(1: set<i32> a,
   *       2: list<map<i32, set<string>>> b);
   */
  public function baz(keyset<int> $a, \Indexish<int, \Indexish<int, keyset<string>>> $b): string;
}

/**
 * Original thrift service:-
 * Bar
 */
trait BarClientBase {
  require extends ThriftClientBase;

  protected function sendImpl_baz(keyset<int> $a, \Indexish<int, \Indexish<int, keyset<string>>> $b): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new Bar_baz_args();
    $args->a = $a;
    $args->b = ThriftUtil::mapVec($b, $_val0 ==> ThriftUtil::mapDict($_val0, $_val1 ==> keyset($_val1)));
    try {
      $this->eventHandler_->preSend('baz', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'baz', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'baz', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('baz', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('baz', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('baz', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('baz', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('baz', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_baz(?int $expectedsequenceid = null): string {
    try {
      $this->eventHandler_->preRecv('baz', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'Bar_baz_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'Bar_baz_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new Bar_baz_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("baz failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('baz', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('baz', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('baz', $expectedsequenceid, $ex->result);
          return $ex->result;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('baz', $expectedsequenceid, $ex);
      throw $ex;
    }
    if ($result->success !== null) {
      $success = $result->success;
      $this->eventHandler_->postRecv('baz', $expectedsequenceid, $success);
      return $success;
    }
    $x = new \TApplicationException("baz failed: unknown result", \TApplicationException::MISSING_RESULT);
    $this->eventHandler_->recvError('baz', $expectedsequenceid, $x);
    throw $x;
  }

}

class BarAsyncClient extends ThriftClientBase implements BarAsyncIf {
  use BarClientBase;

  /**
   * Original thrift definition:-
   * string
   *   baz(1: set<i32> a,
   *       2: list<map<i32, set<string>>> b);
   */
  public async function baz(keyset<int> $a, \Indexish<int, \Indexish<int, keyset<string>>> $b): Awaitable<string> {
    $currentseqid = $this->sendImpl_baz($a, $b);
    await $this->asyncHandler_->genWait($currentseqid);
    return $this->recvImpl_baz($currentseqid);
  }

}

class BarClient extends ThriftClientBase implements BarIf {
  use BarClientBase;

  <<__Deprecated('use gen_baz()')>>
  public function baz(keyset<int> $a, \Indexish<int, \Indexish<int, keyset<string>>> $b): string {
    $currentseqid = $this->sendImpl_baz($a, $b);
    return $this->recvImpl_baz($currentseqid);
  }

  /**
   * Original thrift definition:-
   * string
   *   baz(1: set<i32> a,
   *       2: list<map<i32, set<string>>> b);
   */
  public async function gen_baz(keyset<int> $a, \Indexish<int, \Indexish<int, keyset<string>>> $b): Awaitable<string> {
    $currentseqid = $this->sendImpl_baz($a, $b);
    await $this->asyncHandler_->genWait($currentseqid);
    return $this->recvImpl_baz($currentseqid);
  }

  /* send and recv functions */
  public function send_baz(keyset<int> $a, \Indexish<int, \Indexish<int, keyset<string>>> $b): int {
    return $this->sendImpl_baz($a, $b);
  }
  public function recv_baz(?int $expectedsequenceid = null): string {
    return $this->recvImpl_baz($expectedsequenceid);
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class Bar_baz_args implements \IThriftStruct {
  public static array $_TSPEC = array(
    1 => array(
      'var' => 'a',
      'type' => \TType::SET,
      'etype' => \TType::I32,
      'elem' => array(
        'type' => \TType::I32,
        ),
        'format' => 'harray',
      ),
    2 => array(
      'var' => 'b',
      'type' => \TType::LST,
      'etype' => \TType::MAP,
      'elem' => array(
        'type' => \TType::MAP,
        'ktype' => \TType::I32,
        'vtype' => \TType::SET,
        'key' => array(
          'type' => \TType::I32,
        ),
        'val' => array(
          'type' => \TType::SET,
          'etype' => \TType::STRING,
          'elem' => array(
            'type' => \TType::STRING,
            ),
            'format' => 'harray',
          ),
          'format' => 'harray',
        ),
        'format' => 'harray',
      ),
    );
  public static Map<string, int> $_TFIELDMAP = Map {
    'a' => 1,
    'b' => 2,
  };
  const int STRUCTURAL_ID = 5283012534631553068;
  public keyset<int> $a;
  public vec<dict<int, keyset<string>>> $b;

  public function __construct(?keyset<int> $a = null, ?vec<dict<int, keyset<string>>> $b = null  ) {
    if ($a === null) {
      $this->a = keyset[];
    } else {
      $this->a = $a;
    }
    if ($b === null) {
      $this->b = vec[];
    } else {
      $this->b = $b;
    }
  }

  public function getName(): string {
    return 'Bar_baz_args';
  }

  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::SET) {
            $_size1 = 0;
            $_etype4 = 0;
            $_val0 = keyset[];
            $xfer += $input->readSetBegin($_etype4, $_size1);
            for ($_i5 = 0; $_size1 === null || $_i5 < $_size1; ++$_i5)
            {
              if ($_size1 === null && !$input->readSetHasNext()) {
                break;
              }
              $elem6 = null;
              $xfer += $input->readI32($elem6);
              if ($elem6 !== null) {
                $_val0[] = $elem6;
              }
            }
            $xfer += $input->readSetEnd();
            $this->a = $_val0;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::LST) {
            $_size8 = 0;
            $_val7 = vec[];
            $_etype11 = 0;
            $xfer += $input->readListBegin($_etype11, $_size8);
            for ($_i12 = 0; $_size8 === null || $_i12 < $_size8; ++$_i12)
            {
              if ($_size8 === null && !$input->readListHasNext()) {
                break;
              }
              $_size15 = 0;
              $_val14 = dict[];
              $_ktype16 = 0;
              $_vtype17 = 0;
              $xfer += $input->readMapBegin($_ktype16, $_vtype17, $_size15);
              for ($_i19 = 0; $_size15 === null || $_i19 < $_size15; ++$_i19)
              {
                if ($_size15 === null && !$input->readMapHasNext()) {
                  break;
                }
                $key20 = null;
                $xfer += $input->readI32($key20);
                $_size23 = 0;
                $_etype26 = 0;
                $_val22 = keyset[];
                $xfer += $input->readSetBegin($_etype26, $_size23);
                for ($_i27 = 0; $_size23 === null || $_i27 < $_size23; ++$_i27)
                {
                  if ($_size23 === null && !$input->readSetHasNext()) {
                    break;
                  }
                  $elem28 = null;
                  $xfer += $input->readString($elem28);
                  if ($elem28 !== null) {
                    $_val22[] = $elem28;
                  }
                }
                $xfer += $input->readSetEnd();
                $val21 = $_val22;
                if ($key20 !== null && $val21 !== null) {
                  $_val14[$key20] = $val21;
                }
              }
              $xfer += $input->readMapEnd();
              $elem13 = $_val14;
              if ($elem13 !== null) {
                $_val7 []= $elem13;
              }
            }
            $xfer += $input->readListEnd();
            $this->b = $_val7;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bar_baz_args');
    if ($this->a !== null) {
      $_val0 = $this->a;
      if (!(is_keyset($_val0))) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('a', \TType::SET, 1);
      $output->writeSetBegin(\TType::I32, count($_val0));
      if ($_val0 !== null)
      {
        foreach ($_val0 as $iter1)
        {
          $xfer += $output->writeI32($iter1);
        }
      }
      $output->writeSetEnd();
      $xfer += $output->writeFieldEnd();
    }
    if ($this->b !== null) {
      $_val2 = $this->b;
      if (!($_val2 instanceof \Indexish) && !(($_val2 instanceof \Iterator || $_val2 instanceof \IteratorAggregate) && $_val2 instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('b', \TType::LST, 2);
      $output->writeListBegin(\TType::MAP, count($_val2));
      if ($_val2 !== null)
      {
        foreach ($_val2 as $iter3)
        {
          $output->writeMapBegin(\TType::I32, \TType::SET, count($iter3));
          if ($iter3 !== null)
          {
            foreach ($iter3 as $kiter4 => $viter5)
            {
              $xfer += $output->writeI32($kiter4);
              $output->writeSetBegin(\TType::STRING, count($viter5));
              if ($viter5 !== null)
              {
                foreach ($viter5 as $iter6)
                {
                  $xfer += $output->writeString($iter6);
                }
              }
              $output->writeSetEnd();
            }
          }
          $output->writeMapEnd();
        }
      }
      $output->writeListEnd();
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bar_baz_result implements \IThriftStruct {
  public static array $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'type' => \TType::STRING,
      ),
    );
  public static Map<string, int> $_TFIELDMAP = Map {
    'success' => 0,
  };
  const int STRUCTURAL_ID = 1365128170602685579;
  public ?string $success;

  public function __construct(?string $success = null  ) {
  }

  public function getName(): string {
    return 'Bar_baz_result';
  }

  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bar_baz_result');
    if ($this->success !== null) {
      $_val0 = $this->success;
      $xfer += $output->writeFieldBegin('success', \TType::STRING, 0);
      $xfer += $output->writeString($_val0);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


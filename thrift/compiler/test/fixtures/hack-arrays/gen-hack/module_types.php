<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * Foo
 */
class Foo implements \IThriftStruct {
  public static array $_TSPEC = array(
    1 => array(
      'var' => 'a',
      'type' => \TType::LST,
      'etype' => \TType::STRING,
      'elem' => array(
        'type' => \TType::STRING,
        ),
        'format' => 'harray',
      ),
    2 => array(
      'var' => 'b',
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => array(
        'type' => \TType::STRING,
      ),
      'val' => array(
        'type' => \TType::LST,
        'etype' => \TType::SET,
        'elem' => array(
          'type' => \TType::SET,
          'etype' => \TType::I32,
          'elem' => array(
            'type' => \TType::I32,
            ),
            'format' => 'harray',
          ),
          'format' => 'harray',
        ),
        'format' => 'harray',
      ),
    );
  public static Map<string, int> $_TFIELDMAP = Map {
    'a' => 1,
    'b' => 2,
  };
  const int STRUCTURAL_ID = 5283012534631553068;
  /**
   * Original thrift field:-
   * 1: list<string> a
   */
  public vec<string> $a;
  /**
   * Original thrift field:-
   * 2: map<string, list<set<i32>>> b
   */
  public dict<string, vec<keyset<int>>> $b;

  public function __construct(?vec<string> $a = null, ?dict<string, vec<keyset<int>>> $b = null  ) {
    if ($a === null) {
      $this->a = vec[];
    } else {
      $this->a = $a;
    }
    if ($b === null) {
      $this->b = dict[];
    } else {
      $this->b = $b;
    }
  }

  public function getName(): string {
    return 'Foo';
  }

  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::LST) {
            $_size1 = 0;
            $_val0 = vec[];
            $_etype4 = 0;
            $xfer += $input->readListBegin($_etype4, $_size1);
            for ($_i5 = 0; $_size1 === null || $_i5 < $_size1; ++$_i5)
            {
              if ($_size1 === null && !$input->readListHasNext()) {
                break;
              }
              $elem6 = null;
              $xfer += $input->readString($elem6);
              if ($elem6 !== null) {
                $_val0 []= $elem6;
              }
            }
            $xfer += $input->readListEnd();
            $this->a = $_val0;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::MAP) {
            $_size8 = 0;
            $_val7 = dict[];
            $_ktype9 = 0;
            $_vtype10 = 0;
            $xfer += $input->readMapBegin($_ktype9, $_vtype10, $_size8);
            for ($_i12 = 0; $_size8 === null || $_i12 < $_size8; ++$_i12)
            {
              if ($_size8 === null && !$input->readMapHasNext()) {
                break;
              }
              $key13 = null;
              $xfer += $input->readString($key13);
              $_size16 = 0;
              $_val15 = vec[];
              $_etype19 = 0;
              $xfer += $input->readListBegin($_etype19, $_size16);
              for ($_i20 = 0; $_size16 === null || $_i20 < $_size16; ++$_i20)
              {
                if ($_size16 === null && !$input->readListHasNext()) {
                  break;
                }
                $_size23 = 0;
                $_etype26 = 0;
                $_val22 = keyset[];
                $xfer += $input->readSetBegin($_etype26, $_size23);
                for ($_i27 = 0; $_size23 === null || $_i27 < $_size23; ++$_i27)
                {
                  if ($_size23 === null && !$input->readSetHasNext()) {
                    break;
                  }
                  $elem28 = null;
                  $xfer += $input->readI32($elem28);
                  if ($elem28 !== null) {
                    $_val22[] = $elem28;
                  }
                }
                $xfer += $input->readSetEnd();
                $elem21 = $_val22;
                if ($elem21 !== null) {
                  $_val15 []= $elem21;
                }
              }
              $xfer += $input->readListEnd();
              $val14 = $_val15;
              if ($key13 !== null && $val14 !== null) {
                $_val7[$key13] = $val14;
              }
            }
            $xfer += $input->readMapEnd();
            $this->b = $_val7;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Foo');
    if ($this->a !== null) {
      $_val0 = $this->a;
      if (!($_val0 instanceof \Indexish) && !(($_val0 instanceof \Iterator || $_val0 instanceof \IteratorAggregate) && $_val0 instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('a', \TType::LST, 1);
      $output->writeListBegin(\TType::STRING, count($_val0));
      if ($_val0 !== null)
      {
        foreach ($_val0 as $iter1)
        {
          $xfer += $output->writeString($iter1);
        }
      }
      $output->writeListEnd();
      $xfer += $output->writeFieldEnd();
    }
    if ($this->b !== null) {
      $_val2 = $this->b;
      if (!($_val2 instanceof \Indexish) && !(($_val2 instanceof \Iterator || $_val2 instanceof \IteratorAggregate) && $_val2 instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('b', \TType::MAP, 2);
      $output->writeMapBegin(\TType::STRING, \TType::LST, count($_val2));
      if ($_val2 !== null)
      {
        foreach ($_val2 as $kiter3 => $viter4)
        {
          $xfer += $output->writeString($kiter3);
          $output->writeListBegin(\TType::SET, count($viter4));
          if ($viter4 !== null)
          {
            foreach ($viter4 as $iter5)
            {
              $output->writeSetBegin(\TType::I32, count($iter5));
              if ($iter5 !== null)
              {
                foreach ($iter5 as $iter6)
                {
                  $xfer += $output->writeI32($iter6);
                }
              }
              $output->writeSetEnd();
            }
          }
          $output->writeListEnd();
        }
      }
      $output->writeMapEnd();
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


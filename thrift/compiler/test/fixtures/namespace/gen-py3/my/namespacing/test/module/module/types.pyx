#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t, uint32_t
from cython.operator cimport dereference as deref, preincrement as inc
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types import NOTSET
cimport thrift.py3.std_libcpp as std_libcpp
from thrift.py3.serializer cimport IOBuf
from thrift.py3.serializer import Protocol
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
from enum import Enum




cdef class Foo(thrift.py3.types.Struct):

    def __init__(
        Foo self,
        MyInt=None
    ):
        self.c_Foo = make_shared[cFoo]()

        inst = self
        if MyInt is not None:
            deref(inst.c_Foo).MyInt = MyInt
            deref(inst.c_Foo).__isset.MyInt = True


    cdef bytes _serialize(Foo self, proto):
        cdef string c_str
        if proto is Protocol.COMPACT:
            serializer.CompactSerialize[cFoo](deref(self.c_Foo.get()), &c_str)
        elif proto is Protocol.BINARY:
            serializer.BinarySerialize[cFoo](deref(self.c_Foo.get()), &c_str)
        elif proto is Protocol.JSON:
            serializer.JSONSerialize[cFoo](deref(self.c_Foo.get()), &c_str)
        return <bytes> c_str

    cdef uint32_t _deserialize(Foo self, const IOBuf* buf, proto):
        cdef uint32_t needed
        if proto is Protocol.COMPACT:
            needed = serializer.CompactDeserialize[cFoo](buf, deref(self.c_Foo.get()))
        elif proto is Protocol.BINARY:
            needed = serializer.BinaryDeserialize[cFoo](buf, deref(self.c_Foo.get()))
        elif proto is Protocol.JSON:
            needed = serializer.JSONDeserialize[cFoo](buf, deref(self.c_Foo.get()))
        return needed

    def __reduce__(self):
        return (deserialize, (Foo, serialize(self)))

    def __call__(
        Foo self,
        MyInt=NOTSET
    ):
        changes = any((
            MyInt is not NOTSET,
        ))

        if not changes:
            return self

        inst = <Foo>Foo.__new__(Foo)
        inst.c_Foo = make_shared[cFoo](deref(self.c_Foo))
        cdef Foo defaults = Foo_defaults

        # Convert None's to default value.
        if MyInt is None:
            deref(inst.c_Foo).MyInt = deref(defaults.c_Foo).MyInt
            deref(inst.c_Foo).__isset.MyInt = False
        if MyInt is NOTSET:
            MyInt = None

        if MyInt is not None:
            deref(inst.c_Foo).MyInt = MyInt
            deref(inst.c_Foo).__isset.MyInt = True

        return inst

    def __iter__(self):
        yield 'MyInt', self.MyInt

    def __bool__(self):
        return deref(self.c_Foo).__isset.MyInt

    @staticmethod
    cdef create(shared_ptr[cFoo] c_Foo):
        inst = <Foo>Foo.__new__(Foo)
        inst.c_Foo = c_Foo
        return inst

    @property
    def MyInt(self):
        if not deref(self.c_Foo).__isset.MyInt:
            return None

        return self.c_Foo.get().MyInt


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, Foo) and
                isinstance(other, Foo)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cFoo cself = deref((<Foo>self).c_Foo)
        cdef cFoo cother = deref((<Foo>other).c_Foo)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(Foo self):
        if not self.__hash:
            self.__hash = hash((
            self.MyInt,
            ))
        return self.__hash

    def __repr__(Foo self):
        return f'Foo(MyInt={repr(self.MyInt)})'


Foo_defaults = Foo()


